/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2016-Present Datadog, Inc.
 */

import org.apache.tools.ant.taskdefs.condition.Os

afterEvaluate {

    def androidExtension = extensions.findByName("android")

    if (androidExtension == null || android.applicationVariants == null) {
        throw new GradleException("Android extension is missing or running not in the application" +
                " module. Make sure you've applied datadog-sourcemaps.gradle in the" +
                " application module (usually it is located in the android/app/build.gradle file).")
    }

    androidExtension.applicationVariants.all { variant ->

        def releaseVersion = variant.versionName
        def buildVersion = variant.versionCode

        if (releaseVersion == null) {
            throw new GradleException("Cannot determine application version. Make sure to" +
                    " define versionName property in the application/variant config.")
        }

        // locations and names are defined in "../../node_modules/react-native/react.gradle"
        def targetName = variant.name.capitalize() // e.g. Release
        def targetPath = variant.dirName // e.g. release

        def reactConfig = getReactConfig(buildDir, targetName, targetPath)
        def reactRoot = file(reactConfig.root)

        def bundleTask = tasks.findByName(reactConfig.bundleTaskName)

        if (bundleTask == null) {
            logger.info("Cannot find JS bundle task for variant=${targetName}.")
            return
        }
        if (!bundleTask.enabled) {
            logger.info("JS bundle task for variant=${targetName} is not enabled.")
            return
        }

        def serviceName = getServiceName(variant)
        logger.info("Service name used for the upload of variant=${targetName} is ${serviceName}.")

        def bundleAssetName = reactConfig.bundleAssetName

        def jsSourceMapsDir = file("$buildDir/generated/sourcemaps/react/${targetPath}")
        def jsOutputSourceMapFile = file("$jsSourceMapsDir/${bundleAssetName}.map")

        def uploadTask = tasks.create("upload${targetName}Sourcemaps") {
            group = "datadog"
            description = "Uploads sourcemaps to Datadog."

            def execCommand = { jsBundleFile, shouldUploadBundleFile ->
                def command = [
                        "yarn",
                        "datadog-ci",
                        "react-native",
                        "upload",
                        "--platform",
                        "android",
                        "--service",
                        serviceName,
                        "--sourcemap",
                        jsOutputSourceMapFile.absolutePath,
                        "--release-version",
                        releaseVersion,
                        "--build-version",
                        buildVersion
                ]
                if (shouldUploadBundleFile) {
                    command.add("--bundle")
                    command.add(jsBundleFile.absolutePath)
                }
                return command
            }

            doFirst {
                def shouldUploadBundleFile = getShouldUploadBundleFile(reactRoot)

                def jsBundleFile = reactConfig.bundleFileResolver()
                if (jsBundleFile == null && shouldUploadBundleFile) {
                    throw new GradleException("JS bundle file doesn't exist, aborting upload.")
                }

                if (!jsOutputSourceMapFile.exists()) {
                    throw new GradleException("JS sourcemap file doesn't exist, aborting upload.")
                }

                runShellCommand(execCommand(jsBundleFile, shouldUploadBundleFile), reactRoot)

            }
        }

        uploadTask.dependsOn bundleTask
        bundleTask.finalizedBy uploadTask

    }
}

/**
 * We use a function here to resolve the correct bundle location after the bundle task
 * is over, as its location can depend on the Android Gradle Plugin version.
 */
private def getBundleFileResolver(String[] jsBundleDirs, String bundleAssetName) {
    def resolver = { ->
        return jsBundleDirs.collect {
            file("$it/$bundleAssetName") 
        }.find {
            it.exists()
        }
    }

    return resolver
}

/** 
 * From RN 0.71, the following things changed in the RN gradle plugin:
 * - bundle task name changed from "bundle${targetName}JsAndAssets" to "createBundle${targetName}JsAndAssets"
 * - bundle dir changed from "$buildDir/generated/assets/react/${targetPath}" to "$buildDir/ASSETS/createBundle${targetName}JsAndAssets"
 *   (and then "$buildDir/generated/assets/createBundle${targetPath}JsAndAssets" with the release of Android Gradle Plugin 7.4, see https://github.com/facebook/react-native/issues/35439)
 * - config was in "project.react" and is now in "project.extensions.react"
 * - accessing parameters values requires calling a getter 
 */
private def getReactConfig(File buildDir, String targetName, String targetPath) {
    def reactConfig = [:]

    if (project.extensions.findByName("react")) {
        // From RN 0.71
        def bundleAssetName = project.extensions.react.bundleAssetName.get() ?: "index.android.bundle"
        reactConfig['bundleTaskName'] = "createBundle${targetName}JsAndAssets"
        reactConfig['bundleFileResolver'] = getBundleFileResolver([
            "$buildDir/ASSETS/createBundle${targetName}JsAndAssets", // Android Gradle Plugin 7.3
            "$buildDir/generated/assets/createBundle${targetName}JsAndAssets" // Android Gradle Plugin 7.4 and up
        ] as String[], bundleAssetName)
        reactConfig['bundleAssetName'] = bundleAssetName
        reactConfig['root'] = project.extensions.react.root.get() ?: "../../"
    } else if (project.hasProperty("react")) {
        // WARNING: on RN 0.71, `project.react` is an empty map, so this `if` must go after the previous one.
        // Legacy way, before RN 0.71
        def bundleAssetName = project.react.bundleAssetName ?: "index.android.bundle"
        reactConfig['bundleTaskName'] = "bundle${targetName}JsAndAssets"
        reactConfig['bundleFileResolver'] = getBundleFileResolver(["$buildDir/generated/assets/react/${targetPath}"] as String[], bundleAssetName)
        reactConfig['bundleAssetName'] = bundleAssetName
        reactConfig['root'] = project.react.root ?: "../../"
    } else {
        // We assume this cannot happen with RN >= 0.71, so we use the legacy default values
        def bundleAssetName = "index.android.bundle"
        reactConfig['bundleTaskName'] = "bundle${targetName}JsAndAssets"
        reactConfig['bundleFileResolver'] = getBundleFileResolver(["$buildDir/generated/assets/react/${targetPath}"] as String[], bundleAssetName)
        reactConfig['bundleAssetName'] = bundleAssetName
        reactConfig['root'] = "../../"
    }

    return reactConfig
}

private def runShellCommand(
        List<String> command,
        File workingDirectory
) {
    def outputStream = new ByteArrayOutputStream()
    def errorStream = new ByteArrayOutputStream()

    try {
        def result = exec {
            workingDir = workingDirectory
            standardOutput = outputStream
            errorOutput = errorStream
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine("cmd", "/c", *command)
            } else {
                commandLine(*command)
            }
        }

        if (result.exitValue != 0) {
            logger.error(errorStream.toString("UTF-8"))
            result.rethrowFailure()
        } else {
            logger.lifecycle(outputStream.toString("UTF-8"))
            return outputStream.toString("UTF-8")
        }
    } catch (Exception e) {
        def errorStreamContent = errorStream.toString("UTF-8")
        def standardStreamContent = outputStream.toString("UTF-8")
        logger.error("Exception raised during command execution," +
                " stderr=${errorStreamContent}, stdout=${standardStreamContent}")
        throw e
    }
}

private def getShouldUploadBundleFile(File reactRoot) {
    // Provide a way to override bundle upload
    if (project.hasProperty("datadog")) {
        if (project.datadog.containsKey("shouldUploadBundle")) {
            return project.datadog.shouldUploadBundle
        }
    }

    def datadogCiVersionCommand = [
        "yarn",
        "--silent",
        "datadog-ci",
        "version"
    ]
    try {
        def versionAsString = runShellCommand(datadogCiVersionCommand, reactRoot) // outputs: v2.5.1
        // We remove the leading "v" in the version number output
        List version = versionAsString.replace("v", "").tokenize('.').collect { it.toInteger() }

        // First datadog-ci version allowing not uploading the bundle is 2.6.0
        return !isVersionEqualOrAbove(version, [2, 6, 0])
    } catch (Exception e) {

        return true
    }
}

private static isVersionEqualOrAbove(List version, List targetVersion) {
    if (version[0] != targetVersion[0]) {
        return version[0] > targetVersion[0]
    }
    if (version [1] != targetVersion[1]) {
        return version[1] > targetVersion[1]
    }
    return version[2] >= targetVersion[2]
}

private def getServiceName(variant) {
    if (project.hasProperty("datadog")) {
        if (project.datadog.serviceName) {
            return project.datadog.serviceName
        }
    }
    return variant.applicationId
}
