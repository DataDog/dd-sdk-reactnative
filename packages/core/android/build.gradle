buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has('kotlinVersion') ? rootProject.ext.get('kotlinVersion') : project.properties['DdSdkReactNative_kotlinVersion']

  repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:7.2.2'
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "org.jlleitschuh.gradle:ktlint-gradle:10.2.1"
    classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.18.0"
    classpath 'com.github.bjoernq:unmockplugin:0.7.9'
  }
}


apply plugin: 'de.mobilej.unmock'
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: "io.gitlab.arturbosch.detekt"

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['DdSdkReactNative_' + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['DdSdkReactNative_' + name]).toInteger()
}

android { 
  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')
  buildToolsVersion getExtOrDefault('buildToolsVersion')
  defaultConfig {
    minSdkVersion 19
    targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
    versionCode 1
    versionName "1.0"
    
  }

  sourceSets.named("main") {
    java.srcDir("src/main/kotlin")
  }

  sourceSets.named("test") {
    java.srcDir("src/test/kotlin")
  }

  testOptions {
    unitTests {
      returnDefaultValues = true
    }
  }
  
  buildTypes {
    release {
      minifyEnabled false
    }
  }
  lintOptions {
    disable 'GradleCompatible'
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

repositories {
  mavenCentral()
  google()
  maven { url "https://jitpack.io" }
  mavenLocal()
  maven {
    url "https://oss.sonatype.org/content/repositories/snapshots/"
  }

  def found = false
  def defaultDir = null
  def androidSourcesName = 'React Native sources'

  if (rootProject.ext.has('reactNativeAndroidRoot')) {
    defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
  } else {
    defaultDir = new File(
            projectDir,
            '/../../../node_modules/react-native/android'
    )
  }

  if (defaultDir.exists()) {
    maven {
      url defaultDir.toString()
      name androidSourcesName
    }

    logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
    found = true
  } else {
    def parentDir = rootProject.projectDir

    1.upto(5, {
      if (found) return true
      parentDir = parentDir.parentFile

      def androidSourcesDir = new File(
              parentDir,
              'node_modules/react-native'
      )

      def androidPrebuiltBinaryDir = new File(
              parentDir,
              'node_modules/react-native/android'
      )

      if (androidPrebuiltBinaryDir.exists()) {
        maven {
          url androidPrebuiltBinaryDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
        found = true
      } else if (androidSourcesDir.exists()) {
        maven {
          url androidSourcesDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
        found = true
      }
    })
  }

  if (!found) {
    throw new GradleException(
            "${project.name}: unable to locate React Native android sources. " +
                    "Ensure you have you installed React Native as a dependency in your project and try again."
    )
  }
}

def kotlin_version = getExtOrDefault('kotlinVersion')

dependencies {
  // noinspection GradleDynamicVersion
  api 'com.facebook.react:react-native:+'
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  compileOnly "com.squareup.okhttp3:okhttp:3.12.13"
  
  implementation "com.datadoghq:dd-sdk-android:1.16.0-dev-SNAPSHOT"
  testImplementation "org.junit.platform:junit-platform-launcher:1.6.2"
  testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"
  testImplementation "org.junit.jupiter:junit-jupiter-engine:5.6.2"
  testImplementation "org.mockito:mockito-junit-jupiter:3.4.6"
  testImplementation "org.assertj:assertj-core:3.18.1"
  testImplementation "com.github.xgouchet.Elmyr:core:1.3.1"
  testImplementation "com.github.xgouchet.Elmyr:inject:1.3.1"
  testImplementation "com.github.xgouchet.Elmyr:junit5:1.3.1"
  testImplementation "com.github.xgouchet.Elmyr:jvm:1.3.1"
  testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
  testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
  unmock 'org.robolectric:android-all:4.4_r1-robolectric-r2'
}

unMock {
  keep("android.os.Looper")
  keep("android.os.MessageQueue")
  keep("android.os.SystemProperties")
  keep("android.view.Choreographer")
  keep("android.view.DisplayEventReceiver")
}

tasks.withType(Test) {
  useJUnitPlatform {
    includeEngines("spek", "junit-jupiter", "junit-vintage")
  }
  reports {
    junitXml.required.set(true)
    html.required.set(true)
  }
}

tasks.named("check") {
  dependsOn("ktlintCheck")
  dependsOn("detekt")
}

ktlint {
  debug.set(false)
  android.set(true)
  outputToConsole.set(true)
  ignoreFailures.set(false)
  enableExperimentalRules.set(false)
  additionalEditorconfigFile.set(file("${project.rootDir}/script/config/.editorconfig"))
  filter {
    exclude("**/generated/**")
    include("**/kotlin/**")
  }
}

detekt {
  input = files("$projectDir/src/main/kotlin")
  config = files("${project.rootDir}/detekt.yml")

  reports {
    xml {
      enabled = true
      destination = file("build/reports/detekt.xml")
    }
  }
}

// This is needed to make unmock work. Choreographer class was loaded from android.jar of Android SDK
// (which contains only public API and no internals), which with unmock plugin it should be loaded from the special jar provided by unmock.
// The code below is from the unmock plugin. It seems like something (from RN tooling maybe?) overwrites the location of Choreographer
// to the default one, so we apply the unmock code once again
project.afterEvaluate {
  def outputJarPath = "${project.buildDir}/intermediates/unmocked-android${project.name}.jar"
  def unMockTask = project.tasks.findByName("unMock")
  def outputJarDependency = project.files(outputJarPath).builtBy(unMockTask)

  project.android.unitTestVariants.all { variant ->
    variant.registerPreJavacGeneratedBytecode(outputJarDependency)
  }
}
